/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using UnitTest;

#if !SILVERLIGHT
[Serializable]
#endif
public partial class Blog : TBase
{
  private string _topic;
  private byte[] _content;
  private long _createdTime;
  private string _id;
  private string _ipAddress;
  private Dictionary<string, string> _props;

  public string Topic
  {
    get
    {
      return _topic;
    }
    set
    {
      __isset.topic = true;
      this._topic = value;
    }
  }

  public byte[] Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string IpAddress
  {
    get
    {
      return _ipAddress;
    }
    set
    {
      __isset.ipAddress = true;
      this._ipAddress = value;
    }
  }

  public Dictionary<string, string> Props
  {
    get
    {
      return _props;
    }
    set
    {
      __isset.props = true;
      this._props = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool topic;
    public bool content;
    public bool createdTime;
    public bool id;
    public bool ipAddress;
    public bool props;
  }

  public Blog() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Topic = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Content = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I64) {
            CreatedTime = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            Id = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            IpAddress = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.Map) {
            {
              Props = new Dictionary<string, string>();
              TMap _map0 = iprot.ReadMapBegin();
              for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
              {
                string _key2;
                string _val3;
                _key2 = iprot.ReadString();
                _val3 = iprot.ReadString();
                Props[_key2] = _val3;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {

    Logger.Log("Test Thrift Blog.Write Makr1");
    TStruct struc = new TStruct("Blog");
    Logger.Log("Test Thrift Blog.Write Makr2");
    oprot.WriteStructBegin(struc);
    Logger.Log("Test Thrift Blog.Write Makr3");
    TField field = new TField();
    Logger.Log("Test Thrift Blog.Write Makr4");
    if (Topic != null && __isset.topic) {
        Logger.Log("Test Thrift Blog.Write Makr5");
      field.Name = "topic";
      field.Type = TType.String;
      field.ID = 1;
      Logger.Log("Test Thrift Blog.Write Makr6");
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Topic);
      oprot.WriteFieldEnd();
      Logger.Log("Test Thrift Blog.Write Makr7");
    }
    if (Content != null && __isset.content) {
      field.Name = "content";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Content);
      oprot.WriteFieldEnd();
    }
    if (__isset.createdTime) {
      field.Name = "createdTime";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(CreatedTime);
      oprot.WriteFieldEnd();
    }
    if (Id != null && __isset.id) {
      field.Name = "id";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Id);
      oprot.WriteFieldEnd();
    }
    if (IpAddress != null && __isset.ipAddress) {
      field.Name = "ipAddress";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(IpAddress);
      oprot.WriteFieldEnd();
    }
    if (Props != null && __isset.props) {
      field.Name = "props";
      field.Type = TType.Map;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Props.Count));
        foreach (string _iter4 in Props.Keys)
        {
          oprot.WriteString(_iter4);
          oprot.WriteString(Props[_iter4]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    Logger.Log("Test Thrift Blog.Write Makr8");
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Blog(");
    bool __first = true;
    if (Topic != null && __isset.topic) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Topic: ");
      __sb.Append(Topic);
    }
    if (Content != null && __isset.content) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Content: ");
      __sb.Append(Content);
    }
    if (__isset.createdTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatedTime: ");
      __sb.Append(CreatedTime);
    }
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (IpAddress != null && __isset.ipAddress) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IpAddress: ");
      __sb.Append(IpAddress);
    }
    if (Props != null && __isset.props) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Props: ");
      __sb.Append(Props);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

